{"ast":null,"code":"var _jsxFileName = \"/Users/sethstephens/Desktop/fureverv4 2/furever/Client/src/components/ChatFeature/ChatDisplay.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport Chat from './Chat';\nimport ChatInput from './ChatInput';\nimport axios from 'axios';\nimport { useState, useEffect } from \"react\";\nimport './ChatFeature.scss';\n\n// The code above defines a functional React component called ChatDisplay. The component accepts two props - user and selectedMatch. \n// The component contains two state variables - matchMessages and selectedMatchMessages - which are both set to null by default. \n// The component defines a method called getDataMessages, which makes a GET request to the 'http://localhost:8888/messages' endpoint. \n// The request includes query parameters that specify the userId and correspondingUserId. If the request is successful, \n// he response data is stored in the matchMessages state variable.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ChatDisplay = _ref => {\n  _s();\n  let {\n    user,\n    selectedMatch\n  } = _ref;\n  const userId = user === null || user === void 0 ? void 0 : user.user_id;\n  const matchedUserId = selectedMatch === null || selectedMatch === void 0 ? void 0 : selectedMatch.user_id;\n  const [matchMessages, setmatchMessages] = useState(null);\n  const [selectedMatchMessages, setselectedMatchMessages] = useState(null);\n  const getDataMessages = async () => {\n    try {\n      const response = await axios.get('http://localhost:8888/messages', {\n        params: {\n          userId: userId,\n          correspondingUserId: matchedUserId\n        }\n      });\n      setmatchMessages(response.data);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  // The code above is fetching data from a local server. It is making a GET request to the 'messages' endpoint. \n  // The 'params' object is being used to pass in the 'userId' and 'correspondingUserId'. These two values are being used to filter \n  // the data that is being returned from the server. The 'setselectedMatchMessages' function is being used to store the data \n  // that is being returned from the server.\n\n  const getselectedMatchMessages = async () => {\n    try {\n      const response = await axios.get('http://localhost:8888/messages', {\n        params: {\n          userId: matchedUserId,\n          correspondingUserId: userId\n        }\n      });\n      setselectedMatchMessages(response.data);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  useEffect(() => {\n    getDataMessages();\n    getselectedMatchMessages();\n  }, []);\n  const messages = [];\n\n  // takes in two parameters, matchMessages and selectedMatchMessages. The function then iterates through each object in the \n  // matchMessages array and creates a new object with four key-value pairs. The keys are name, img, message, and timestamp. \n  // The values for name and img are set to the first_name and url properties of the user object, respectively. The value for \n  // message is set to the message property of the message object, and the value for timestamp is set to the timestamp property of \n  // the message object. The function does the same thing for the selectedMatchMessages array. Finally, the function sorts the messages \n  // in descending order based on the timestamp.\n\n  matchMessages === null || matchMessages === void 0 ? void 0 : matchMessages.forEach(message => {\n    const formattedMessage = {};\n    formattedMessage['name'] = user === null || user === void 0 ? void 0 : user.first_name;\n    formattedMessage['img'] = user === null || user === void 0 ? void 0 : user.url;\n    formattedMessage['message'] = message.message;\n    formattedMessage['timestamp'] = message.timestamp;\n    messages.push(formattedMessage);\n  });\n  selectedMatchMessages === null || selectedMatchMessages === void 0 ? void 0 : selectedMatchMessages.forEach(message => {\n    const formattedMessage = {};\n    formattedMessage['name'] = selectedMatch === null || selectedMatch === void 0 ? void 0 : selectedMatch.first_name;\n    formattedMessage['img'] = selectedMatch === null || selectedMatch === void 0 ? void 0 : selectedMatch.url;\n    formattedMessage['message'] = message.message;\n    formattedMessage['timestamp'] = message.timestamp;\n    messages.push(formattedMessage);\n  });\n  const descendingOrderMessages = messages === null || messages === void 0 ? void 0 : messages.sort((a, b) => a.timestamp.localeCompare(b.timestamp));\n\n  // The code below creates a ChatInput component and a Chat component. The ChatInput component has props for a user, selectedMatch, \n  // getUserMessages, and getselectedMatchMessages. The Chat component has a prop for descendingOrderMessages.\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Chat, {\n      descendingOrderMessages: descendingOrderMessages\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(ChatInput, {\n      user: user,\n      selectedMatch: selectedMatch,\n      getUserMessages: getDataMessages,\n      getselectedMatchMessages: getselectedMatchMessages\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 6\n    }, this)]\n  }, void 0, true);\n};\n_s(ChatDisplay, \"s7+LDTDcUxTal0/ITndARbSHD3k=\");\n_c = ChatDisplay;\nexport default ChatDisplay;\nvar _c;\n$RefreshReg$(_c, \"ChatDisplay\");","map":{"version":3,"names":["React","Chat","ChatInput","axios","useState","useEffect","ChatDisplay","user","selectedMatch","userId","user_id","matchedUserId","matchMessages","setmatchMessages","selectedMatchMessages","setselectedMatchMessages","getDataMessages","response","get","params","correspondingUserId","data","error","console","log","getselectedMatchMessages","messages","forEach","message","formattedMessage","first_name","url","timestamp","push","descendingOrderMessages","sort","a","b","localeCompare"],"sources":["/Users/sethstephens/Desktop/fureverv4 2/furever/Client/src/components/ChatFeature/ChatDisplay.js"],"sourcesContent":["import React from 'react'\nimport Chat from './Chat'\nimport ChatInput from './ChatInput'\nimport axios from 'axios'\nimport {useState, useEffect} from \"react\"\nimport './ChatFeature.scss'\n\n\n// The code above defines a functional React component called ChatDisplay. The component accepts two props - user and selectedMatch. \n// The component contains two state variables - matchMessages and selectedMatchMessages - which are both set to null by default. \n// The component defines a method called getDataMessages, which makes a GET request to the 'http://localhost:8888/messages' endpoint. \n// The request includes query parameters that specify the userId and correspondingUserId. If the request is successful, \n// he response data is stored in the matchMessages state variable.\n\n\nconst ChatDisplay = ({ user , selectedMatch }) => {\n    const userId = user?.user_id\n    const matchedUserId = selectedMatch?.user_id\n    const [matchMessages, setmatchMessages] = useState(null)\n    const [selectedMatchMessages, setselectedMatchMessages] = useState(null)\n\n    const getDataMessages = async () => {\n     try {\n            const response = await axios.get('http://localhost:8888/messages', {\n                params: { userId: userId, correspondingUserId: matchedUserId}\n            })\n         setmatchMessages(response.data)\n        } catch (error) {\n         console.log(error)\n     }\n    }\n\n    // The code above is fetching data from a local server. It is making a GET request to the 'messages' endpoint. \n    // The 'params' object is being used to pass in the 'userId' and 'correspondingUserId'. These two values are being used to filter \n    // the data that is being returned from the server. The 'setselectedMatchMessages' function is being used to store the data \n    // that is being returned from the server.\n\n    const getselectedMatchMessages = async () => {\n        try {\n            const response = await axios.get('http://localhost:8888/messages', {\n                params: { userId: matchedUserId , correspondingUserId: userId}\n            })\n            setselectedMatchMessages(response.data)\n        } catch (error) {\n            console.log(error)\n        }\n    }\n\n    useEffect(() => {\n        getDataMessages()\n        getselectedMatchMessages()\n    }, [])\n\n    const messages = []\n\n    // takes in two parameters, matchMessages and selectedMatchMessages. The function then iterates through each object in the \n    // matchMessages array and creates a new object with four key-value pairs. The keys are name, img, message, and timestamp. \n    // The values for name and img are set to the first_name and url properties of the user object, respectively. The value for \n    // message is set to the message property of the message object, and the value for timestamp is set to the timestamp property of \n    // the message object. The function does the same thing for the selectedMatchMessages array. Finally, the function sorts the messages \n    // in descending order based on the timestamp.\n\n    matchMessages?.forEach(message => {\n        const formattedMessage = {}\n        formattedMessage['name'] = user?.first_name\n        formattedMessage['img'] = user?.url\n        formattedMessage['message'] = message.message\n        formattedMessage['timestamp'] = message.timestamp\n        messages.push(formattedMessage)\n    })\n\n    selectedMatchMessages?.forEach(message => {\n        const formattedMessage = {}\n        formattedMessage['name'] = selectedMatch?.first_name\n        formattedMessage['img'] = selectedMatch?.url\n        formattedMessage['message'] = message.message\n        formattedMessage['timestamp'] = message.timestamp\n        messages.push(formattedMessage)\n    })\n\n    const descendingOrderMessages = messages?.sort((a,b) => a.timestamp.localeCompare(b.timestamp))\n\n    // The code below creates a ChatInput component and a Chat component. The ChatInput component has props for a user, selectedMatch, \n    // getUserMessages, and getselectedMatchMessages. The Chat component has a prop for descendingOrderMessages.\n    return (\n        <>\n        <Chat descendingOrderMessages={descendingOrderMessages}/>\n     <ChatInput\n         user={user}\n         selectedMatch={selectedMatch} getUserMessages={getDataMessages} getselectedMatchMessages={getselectedMatchMessages}/>\n        </>\n    )\n}\n\nexport default ChatDisplay"],"mappings":"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"},"metadata":{},"sourceType":"module"}