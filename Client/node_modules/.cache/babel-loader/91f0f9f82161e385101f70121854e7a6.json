{"ast":null,"code":"import _regeneratorRuntime from\"/Users/sethstephens/Desktop/fureverv4 2/furever/Client/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _asyncToGenerator from\"/Users/sethstephens/Desktop/fureverv4 2/furever/Client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _slicedToArray from\"/Users/sethstephens/Desktop/fureverv4 2/furever/Client/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import TinderCard from'react-tinder-card';import{useEffect,useState}from'react';import ChatFeature from'../components/ChatFeature/ChatFeature';import{useCookies}from'react-cookie';import axios from'axios';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";var ControlPanel=function ControlPanel(){// The code defines three state variables - user, preferedUsers, and lastSwipe - and a cookies variable. \n// The cookies variable is used to set, get, and remove cookies.\nvar _useState=useState(null),_useState2=_slicedToArray(_useState,2),newUser=_useState2[0],setNewUser=_useState2[1];var _useState3=useState(null),_useState4=_slicedToArray(_useState3,2),preferedUsers=_useState4[0],setpreferedUsers=_useState4[1];var _useState5=useState(),_useState6=_slicedToArray(_useState5,2),lastSwipe=_useState6[0],setLastSwipe=_useState6[1];var _useCookies=useCookies(['user']),_useCookies2=_slicedToArray(_useCookies,3),cookies=_useCookies2[0],setCookie=_useCookies2[1],removeCookie=_useCookies2[2];var userId=cookies.UserId;// This code uses the Axios library to send a GET request to the 'http://localhost:8888/user' endpoint. \n// The 'userId' variable is passed in as a parameter in the request. If the request is successful, the response data is stored \n// in the 'user' state variable.\nvar getNewUser=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(){var response;return _regeneratorRuntime().wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return axios.get('http://localhost:8888/user',{params:{userId:userId}});case 3:response=_context.sent;setNewUser(response.data);_context.next=10;break;case 7:_context.prev=7;_context.t0=_context[\"catch\"](0);console.log(_context.t0);case 10:case\"end\":return _context.stop();}}},_callee,null,[[0,7]]);}));return function getNewUser(){return _ref.apply(this,arguments);};}();// This code uses the axios library to make a GET request to the server at 'http://localhost:8888/prefered-users'. \n// The 'params' object contains the key-value pair 'gender: user?.gender_interest'. This means that the 'gender' \n// parameter will be set to the value of the 'gender_interest' property of the 'user' object. If the 'user' object is undefined, \n// then the 'gender' parameter will be set to undefined.\n// The response from the server is stored in the 'response' variable. The 'data' property of the 'response' object is then \n// passed to the 'setpreferedUsers' function.\nvar getpreferedUsers=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(){var res;return _regeneratorRuntime().wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.prev=0;_context2.next=3;return axios.get('http://localhost:8888/userOptions',{params:{preference:newUser===null||newUser===void 0?void 0:newUser.pet_user}});case 3:res=_context2.sent;setpreferedUsers(res.data);_context2.next=10;break;case 7:_context2.prev=7;_context2.t0=_context2[\"catch\"](0);console.log(_context2.t0);case 10:case\"end\":return _context2.stop();}}},_callee2,null,[[0,7]]);}));return function getpreferedUsers(){return _ref2.apply(this,arguments);};}();useEffect(function(){getNewUser();},[]);// The code below uses the useEffect hook to call the getpreferedUsers function if the user is truthy.\nuseEffect(function(){if(newUser){getpreferedUsers();}},[newUser]);// The code below is a function that uses the axios PUT method to send a request to the server to update the matches for the user. \n// The user's id and the id of the matched user are passed in as parameters. If the request is successful, the getNewUser function \n// is called to get the updated list of matches for the user.\nvar updateMatches=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3(matchedUserId){return _regeneratorRuntime().wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.prev=0;_context3.next=3;return axios.put('http://localhost:8888/swipeMatches',{userId:userId,matchedUserId:matchedUserId});case 3:getNewUser();_context3.next=9;break;case 6:_context3.prev=6;_context3.t0=_context3[\"catch\"](0);console.log(_context3.t0);case 9:case\"end\":return _context3.stop();}}},_callee3,null,[[0,6]]);}));return function updateMatches(_x){return _ref3.apply(this,arguments);};}();// The code above defines two functions, swiped and outOfFrame, and a constant, filteredpreferedUsers. swiped takes in a \n// Swipe and a swipedUserId, and if the Swipe is 'right', calls updateMatches with the swipedUserId. \n// outOfFrame takes in a name and prints the name with ' left the screen!' concatenated to the console. \n// filteredpreferedUsers is a constant that uses the .filter method on the preferedUsers array to return a new array with only \n// the users that are not in the matchedUserIds array.\nvar swiped=function swiped(Swipe,swipedUserId){if(Swipe==='right'){updateMatches(swipedUserId);}setLastSwipe(Swipe);};var matchedUserIds=newUser===null||newUser===void 0?void 0:newUser.matches.map(function(_ref4){var user_id=_ref4.user_id;return user_id;}).concat(userId);var filteredpreferedUsers=preferedUsers===null||preferedUsers===void 0?void 0:preferedUsers.filter(function(preferedUser){return!matchedUserIds.includes(preferedUser.user_id);});// The code above is a functional component that renders a dashboard. The dashboard includes a chat container, \n// a swipe container, and a card container. The chat container includes a chat window and a list of chat rooms. \n// The swipe container contains Tinder cards that users can swipe left or right on. The card container displays the Tinder cards.\nreturn/*#__PURE__*/_jsx(_Fragment,{children:newUser&&/*#__PURE__*/_jsxs(\"div\",{className:\"dashboard\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"swipe-container\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"card-container\",children:[filteredpreferedUsers===null||filteredpreferedUsers===void 0?void 0:filteredpreferedUsers.map(function(preferedUser){return/*#__PURE__*/_jsx(TinderCard,{className:\"swipe\",onSwipe:function onSwipe(dir){return swiped(dir,preferedUser.user_id);},children:/*#__PURE__*/_jsx(\"div\",{style:{backgroundImage:\"url(\"+preferedUser.url+\")\"},className:\"card\",children:/*#__PURE__*/_jsx(\"h3\",{children:preferedUser.First_Name})})},preferedUser.user_id);}),/*#__PURE__*/_jsx(\"div\",{className:\"swipe-info\",children:lastSwipe?/*#__PURE__*/_jsxs(\"p\",{children:[\"You swiped \",lastSwipe]}):/*#__PURE__*/_jsx(\"p\",{})})]})}),/*#__PURE__*/_jsx(ChatFeature,{user:newUser})]})});};export default ControlPanel;","map":{"version":3,"names":["TinderCard","useEffect","useState","ChatFeature","useCookies","axios","ControlPanel","newUser","setNewUser","preferedUsers","setpreferedUsers","lastSwipe","setLastSwipe","cookies","setCookie","removeCookie","userId","UserId","getNewUser","get","params","response","data","console","log","getpreferedUsers","preference","pet_user","res","updateMatches","matchedUserId","put","swiped","Swipe","swipedUserId","matchedUserIds","matches","map","user_id","concat","filteredpreferedUsers","filter","preferedUser","includes","dir","backgroundImage","url","First_Name"],"sources":["/Users/sethstephens/Desktop/fureverv4 2/furever/Client/src/pages/ControlPanel.js"],"sourcesContent":["import TinderCard from 'react-tinder-card'\nimport {useEffect, useState} from 'react'\nimport ChatFeature from '../components/ChatFeature/ChatFeature'\nimport {useCookies} from 'react-cookie'\nimport axios from 'axios'\n\nconst ControlPanel = () => {\n\n    // The code defines three state variables - user, preferedUsers, and lastSwipe - and a cookies variable. \n    // The cookies variable is used to set, get, and remove cookies.\n    const [newUser, setNewUser] = useState(null)\n    const [preferedUsers, setpreferedUsers] = useState(null)\n    const [lastSwipe, setLastSwipe] = useState()\n    const [cookies, setCookie, removeCookie] = useCookies(['user'])\n\n    const userId = cookies.UserId\n\n\n    // This code uses the Axios library to send a GET request to the 'http://localhost:8888/user' endpoint. \n    // The 'userId' variable is passed in as a parameter in the request. If the request is successful, the response data is stored \n    // in the 'user' state variable.\n    const getNewUser = async () => {\n        try {\n            const response = await axios.get('http://localhost:8888/user', {\n                params: {userId}\n            })\n            setNewUser(response.data)\n        } catch (error) {\n            console.log(error)\n        }\n    }\n\n    // This code uses the axios library to make a GET request to the server at 'http://localhost:8888/prefered-users'. \n    // The 'params' object contains the key-value pair 'gender: user?.gender_interest'. This means that the 'gender' \n    // parameter will be set to the value of the 'gender_interest' property of the 'user' object. If the 'user' object is undefined, \n    // then the 'gender' parameter will be set to undefined.\n    // The response from the server is stored in the 'response' variable. The 'data' property of the 'response' object is then \n    // passed to the 'setpreferedUsers' function.\n    const getpreferedUsers = async () => {\n        try {\n            const res = await axios.get('http://localhost:8888/userOptions', {\n                params: {preference: newUser?.pet_user}\n            })\n            setpreferedUsers(res.data)\n        } catch (error) {\n            console.log(error)\n        }\n    }\n\n    useEffect(() => {\n        getNewUser()\n\n    }, [])\n\n    // The code below uses the useEffect hook to call the getpreferedUsers function if the user is truthy.\n    useEffect(() => {\n        if (newUser) {\n            getpreferedUsers()\n        }\n    }, [newUser])\n\n    // The code below is a function that uses the axios PUT method to send a request to the server to update the matches for the user. \n    // The user's id and the id of the matched user are passed in as parameters. If the request is successful, the getNewUser function \n    // is called to get the updated list of matches for the user.\n\n    const updateMatches = async (matchedUserId) => {\n        try {\n            await axios.put('http://localhost:8888/swipeMatches', {\n                userId,\n                matchedUserId\n            })\n            getNewUser()\n        } catch (err) {\n            console.log(err)\n        }\n    }\n\n    // The code above defines two functions, swiped and outOfFrame, and a constant, filteredpreferedUsers. swiped takes in a \n    // Swipe and a swipedUserId, and if the Swipe is 'right', calls updateMatches with the swipedUserId. \n    // outOfFrame takes in a name and prints the name with ' left the screen!' concatenated to the console. \n    // filteredpreferedUsers is a constant that uses the .filter method on the preferedUsers array to return a new array with only \n    // the users that are not in the matchedUserIds array.\n    const swiped = (Swipe, swipedUserId) => {\n        if (Swipe === 'right') {\n            updateMatches(swipedUserId)\n        }\n        setLastSwipe(Swipe)\n    }\n    const matchedUserIds = newUser?.matches.map(({user_id}) => user_id).concat(userId)\n\n    const filteredpreferedUsers = preferedUsers?.filter(preferedUser => !matchedUserIds.includes(preferedUser.user_id))\n\n    // The code above is a functional component that renders a dashboard. The dashboard includes a chat container, \n    // a swipe container, and a card container. The chat container includes a chat window and a list of chat rooms. \n    // The swipe container contains Tinder cards that users can swipe left or right on. The card container displays the Tinder cards.\n    return (\n        <>\n            {newUser &&\n            <div className=\"dashboard\">\n                <div className=\"swipe-container\">\n                    <div className=\"card-container\">\n\n                        {filteredpreferedUsers?.map((preferedUser) =>\n                            <TinderCard\n                                className=\"swipe\"\n                                key={preferedUser.user_id}\n                                onSwipe={(dir) => swiped(dir, preferedUser.user_id)}>\n                                <div\n                                    style={{backgroundImage: \"url(\" + preferedUser.url + \")\"}}\n                                    className=\"card\">\n                                    <h3>{preferedUser.First_Name}</h3>\n                                </div>\n                            </TinderCard>\n                        )}\n                        <div className=\"swipe-info\">\n                            {lastSwipe ? <p>You swiped {lastSwipe}</p> : <p/>}\n                        </div>\n                    </div>\n                </div>\n                <ChatFeature user={newUser}/>\n            </div>}\n        </>\n    )\n}\nexport default ControlPanel"],"mappings":"obAAA,MAAOA,WAAU,KAAM,mBAAmB,CAC1C,OAAQC,SAAS,CAAEC,QAAQ,KAAO,OAAO,CACzC,MAAOC,YAAW,KAAM,uCAAuC,CAC/D,OAAQC,UAAU,KAAO,cAAc,CACvC,MAAOC,MAAK,KAAM,OAAO,8IAEzB,GAAMC,aAAY,CAAG,QAAfA,aAAY,EAAS,CAEvB;AACA;AACA,cAA8BJ,QAAQ,CAAC,IAAI,CAAC,wCAArCK,OAAO,eAAEC,UAAU,eAC1B,eAA0CN,QAAQ,CAAC,IAAI,CAAC,yCAAjDO,aAAa,eAAEC,gBAAgB,eACtC,eAAkCR,QAAQ,EAAE,yCAArCS,SAAS,eAAEC,YAAY,eAC9B,gBAA2CR,UAAU,CAAC,CAAC,MAAM,CAAC,CAAC,4CAAxDS,OAAO,iBAAEC,SAAS,iBAAEC,YAAY,iBAEvC,GAAMC,OAAM,CAAGH,OAAO,CAACI,MAAM,CAG7B;AACA;AACA;AACA,GAAMC,WAAU,4FAAG,wLAEYb,MAAK,CAACc,GAAG,CAAC,4BAA4B,CAAE,CAC3DC,MAAM,CAAE,CAACJ,MAAM,CAANA,MAAM,CACnB,CAAC,CAAC,QAFIK,QAAQ,eAGdb,UAAU,CAACa,QAAQ,CAACC,IAAI,CAAC,gFAEzBC,OAAO,CAACC,GAAG,aAAO,qEAEzB,kBATKN,WAAU,0CASf,CAED;AACA;AACA;AACA;AACA;AACA;AACA,GAAMO,iBAAgB,6FAAG,0LAECpB,MAAK,CAACc,GAAG,CAAC,mCAAmC,CAAE,CAC7DC,MAAM,CAAE,CAACM,UAAU,CAAEnB,OAAO,SAAPA,OAAO,iBAAPA,OAAO,CAAEoB,QAAQ,CAC1C,CAAC,CAAC,QAFIC,GAAG,gBAGTlB,gBAAgB,CAACkB,GAAG,CAACN,IAAI,CAAC,oFAE1BC,OAAO,CAACC,GAAG,cAAO,uEAEzB,kBATKC,iBAAgB,2CASrB,CAEDxB,SAAS,CAAC,UAAM,CACZiB,UAAU,EAAE,CAEhB,CAAC,CAAE,EAAE,CAAC,CAEN;AACAjB,SAAS,CAAC,UAAM,CACZ,GAAIM,OAAO,CAAE,CACTkB,gBAAgB,EAAE,CACtB,CACJ,CAAC,CAAE,CAAClB,OAAO,CAAC,CAAC,CAEb;AACA;AACA;AAEA,GAAMsB,cAAa,6FAAG,kBAAOC,aAAa,gKAE5BzB,MAAK,CAAC0B,GAAG,CAAC,oCAAoC,CAAE,CAClDf,MAAM,CAANA,MAAM,CACNc,aAAa,CAAbA,aACJ,CAAC,CAAC,QACFZ,UAAU,EAAE,mFAEZK,OAAO,CAACC,GAAG,cAAK,sEAEvB,kBAVKK,cAAa,6CAUlB,CAED;AACA;AACA;AACA;AACA;AACA,GAAMG,OAAM,CAAG,QAATA,OAAM,CAAIC,KAAK,CAAEC,YAAY,CAAK,CACpC,GAAID,KAAK,GAAK,OAAO,CAAE,CACnBJ,aAAa,CAACK,YAAY,CAAC,CAC/B,CACAtB,YAAY,CAACqB,KAAK,CAAC,CACvB,CAAC,CACD,GAAME,eAAc,CAAG5B,OAAO,SAAPA,OAAO,iBAAPA,OAAO,CAAE6B,OAAO,CAACC,GAAG,CAAC,mBAAEC,QAAO,OAAPA,OAAO,OAAMA,QAAO,GAAC,CAACC,MAAM,CAACvB,MAAM,CAAC,CAElF,GAAMwB,sBAAqB,CAAG/B,aAAa,SAAbA,aAAa,iBAAbA,aAAa,CAAEgC,MAAM,CAAC,SAAAC,YAAY,QAAI,CAACP,cAAc,CAACQ,QAAQ,CAACD,YAAY,CAACJ,OAAO,CAAC,GAAC,CAEnH;AACA;AACA;AACA,mBACI,yBACK/B,OAAO,eACR,aAAK,SAAS,CAAC,WAAW,wBACtB,YAAK,SAAS,CAAC,iBAAiB,uBAC5B,aAAK,SAAS,CAAC,gBAAgB,WAE1BiC,qBAAqB,SAArBA,qBAAqB,iBAArBA,qBAAqB,CAAEH,GAAG,CAAC,SAACK,YAAY,qBACrC,KAAC,UAAU,EACP,SAAS,CAAC,OAAO,CAEjB,OAAO,CAAE,iBAACE,GAAG,QAAKZ,OAAM,CAACY,GAAG,CAAEF,YAAY,CAACJ,OAAO,CAAC,EAAC,uBACpD,YACI,KAAK,CAAE,CAACO,eAAe,CAAE,MAAM,CAAGH,YAAY,CAACI,GAAG,CAAG,GAAG,CAAE,CAC1D,SAAS,CAAC,MAAM,uBAChB,oBAAKJ,YAAY,CAACK,UAAU,EAAM,EAChC,EANDL,YAAY,CAACJ,OAAO,CAOhB,GAChB,cACD,YAAK,SAAS,CAAC,YAAY,UACtB3B,SAAS,cAAG,mCAAeA,SAAS,GAAK,cAAG,YAAI,EAC/C,GACJ,EACJ,cACN,KAAC,WAAW,EAAC,IAAI,CAAEJ,OAAQ,EAAE,GAC3B,EACP,CAEX,CAAC,CACD,cAAeD,aAAY"},"metadata":{},"sourceType":"module"}