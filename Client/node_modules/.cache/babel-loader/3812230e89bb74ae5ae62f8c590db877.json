{"ast":null,"code":"var _jsxFileName = \"/Users/sethstephens/Desktop/fureverv4 2/furever/Client/src/pages/ControlPanel.js\",\n  _s = $RefreshSig$();\nimport TinderCard from 'react-tinder-card';\nimport { useEffect, useState } from 'react';\nimport ChatContainer from '../components/ChatFeature/ChatContainer';\nimport { useCookies } from 'react-cookie';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ControlPanel = () => {\n  _s();\n  // The code defines three state variables - user, genderedUsers, and lastDirection - and a cookies variable. \n  // The cookies variable is used to set, get, and remove cookies.\n  const [user, setUser] = useState(null);\n  const [genderedUsers, setGenderedUsers] = useState(null);\n  const [lastDirection, setLastDirection] = useState();\n  const [cookies, setCookie, removeCookie] = useCookies(['user']);\n  const userId = cookies.UserId;\n\n  // This code uses the Axios library to send a GET request to the 'http://localhost:8888/user' endpoint. \n  // The 'userId' variable is passed in as a parameter in the request. If the request is successful, the response data is stored \n  // in the 'user' state variable.\n  const getUser = async () => {\n    try {\n      const response = await axios.get('http://localhost:8888/user', {\n        params: {\n          userId\n        }\n      });\n      setUser(response.data);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  // This code uses the axios library to make a GET request to the server at 'http://localhost:8888/gendered-users'. \n  // The 'params' object contains the key-value pair 'gender: user?.gender_interest'. This means that the 'gender' \n  // parameter will be set to the value of the 'gender_interest' property of the 'user' object. If the 'user' object is undefined, \n  // then the 'gender' parameter will be set to undefined.\n  // The response from the server is stored in the 'response' variable. The 'data' property of the 'response' object is then \n  // passed to the 'setGenderedUsers' function.\n  const getGenderedUsers = async () => {\n    try {\n      const response = await axios.get('http://localhost:8888/gendered-users', {\n        params: {\n          gender: user === null || user === void 0 ? void 0 : user.UserOrAgency\n        }\n      });\n      setGenderedUsers(response.data);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  useEffect(() => {\n    getUser();\n  }, []);\n\n  // The code below uses the useEffect hook to call the getGenderedUsers function if the user is truthy.\n  useEffect(() => {\n    if (user) {\n      getGenderedUsers();\n    }\n  }, [user]);\n\n  // The code below is a function that uses the axios PUT method to send a request to the server to update the matches for the user. \n  // The user's id and the id of the matched user are passed in as parameters. If the request is successful, the getUser function \n  // is called to get the updated list of matches for the user.\n\n  const updateMatches = async matchedUserId => {\n    try {\n      await axios.put('http://localhost:8888/addmatch', {\n        userId,\n        matchedUserId\n      });\n      getUser();\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  // The code above defines two functions, swiped and outOfFrame, and a constant, filteredGenderedUsers. swiped takes in a \n  // direction and a swipedUserId, and if the direction is 'right', calls updateMatches with the swipedUserId. \n  // outOfFrame takes in a name and prints the name with ' left the screen!' concatenated to the console. \n  // filteredGenderedUsers is a constant that uses the .filter method on the genderedUsers array to return a new array with only \n  // the users that are not in the matchedUserIds array.\n  const swiped = (direction, swipedUserId) => {\n    if (direction === 'right') {\n      updateMatches(swipedUserId);\n    }\n    setLastDirection(direction);\n  };\n  const outOfFrame = name => {\n    console.log(name + ' left the screen!');\n  };\n  const matchedUserIds = user === null || user === void 0 ? void 0 : user.matches.map(_ref => {\n    let {\n      user_id\n    } = _ref;\n    return user_id;\n  }).concat(userId);\n  const filteredGenderedUsers = genderedUsers === null || genderedUsers === void 0 ? void 0 : genderedUsers.filter(genderedUser => !matchedUserIds.includes(genderedUser.user_id));\n\n  // The code above is a functional component that renders a dashboard. The dashboard includes a chat container, \n  // a swipe container, and a card container. The chat container includes a chat window and a list of chat rooms. \n  // The swipe container contains Tinder cards that users can swipe left or right on. The card container displays the Tinder cards.\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: user && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard\",\n      children: [/*#__PURE__*/_jsxDEV(ChatContainer, {\n        user: user\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"swipe-container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-container\",\n          children: [filteredGenderedUsers === null || filteredGenderedUsers === void 0 ? void 0 : filteredGenderedUsers.map(genderedUser => /*#__PURE__*/_jsxDEV(TinderCard, {\n            className: \"swipe\",\n            onSwipe: dir => swiped(dir, genderedUser.user_id),\n            onCardLeftScreen: () => outOfFrame(genderedUser.First_Name),\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                backgroundImage: \"url(\" + genderedUser.url + \")\"\n              },\n              className: \"card\",\n              children: /*#__PURE__*/_jsxDEV(\"h3\", {\n                children: genderedUser.First_Name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 118,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 115,\n              columnNumber: 33\n            }, this)\n          }, genderedUser.user_id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 29\n          }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"swipe-info\",\n            children: lastDirection ? /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"You swiped \", lastDirection]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 123,\n              columnNumber: 46\n            }, this) : /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 123,\n              columnNumber: 82\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n_s(ControlPanel, \"0bS9CjnLFJex5ipLOoqcdl+vknE=\", false, function () {\n  return [useCookies];\n});\n_c = ControlPanel;\nexport default ControlPanel;\nvar _c;\n$RefreshReg$(_c, \"ControlPanel\");","map":{"version":3,"names":["TinderCard","useEffect","useState","ChatContainer","useCookies","axios","ControlPanel","user","setUser","genderedUsers","setGenderedUsers","lastDirection","setLastDirection","cookies","setCookie","removeCookie","userId","UserId","getUser","response","get","params","data","error","console","log","getGenderedUsers","gender","UserOrAgency","updateMatches","matchedUserId","put","err","swiped","direction","swipedUserId","outOfFrame","name","matchedUserIds","matches","map","user_id","concat","filteredGenderedUsers","filter","genderedUser","includes","dir","First_Name","backgroundImage","url"],"sources":["/Users/sethstephens/Desktop/fureverv4 2/furever/Client/src/pages/ControlPanel.js"],"sourcesContent":["import TinderCard from 'react-tinder-card'\nimport {useEffect, useState} from 'react'\nimport ChatContainer from '../components/ChatFeature/ChatContainer'\nimport {useCookies} from 'react-cookie'\nimport axios from 'axios'\n\nconst ControlPanel = () => {\n\n    // The code defines three state variables - user, genderedUsers, and lastDirection - and a cookies variable. \n    // The cookies variable is used to set, get, and remove cookies.\n    const [user, setUser] = useState(null)\n    const [genderedUsers, setGenderedUsers] = useState(null)\n    const [lastDirection, setLastDirection] = useState()\n    const [cookies, setCookie, removeCookie] = useCookies(['user'])\n\n    const userId = cookies.UserId\n\n\n    // This code uses the Axios library to send a GET request to the 'http://localhost:8888/user' endpoint. \n    // The 'userId' variable is passed in as a parameter in the request. If the request is successful, the response data is stored \n    // in the 'user' state variable.\n    const getUser = async () => {\n        try {\n            const response = await axios.get('http://localhost:8888/user', {\n                params: {userId}\n            })\n            setUser(response.data)\n        } catch (error) {\n            console.log(error)\n        }\n    }\n\n    // This code uses the axios library to make a GET request to the server at 'http://localhost:8888/gendered-users'. \n    // The 'params' object contains the key-value pair 'gender: user?.gender_interest'. This means that the 'gender' \n    // parameter will be set to the value of the 'gender_interest' property of the 'user' object. If the 'user' object is undefined, \n    // then the 'gender' parameter will be set to undefined.\n    // The response from the server is stored in the 'response' variable. The 'data' property of the 'response' object is then \n    // passed to the 'setGenderedUsers' function.\n    const getGenderedUsers = async () => {\n        try {\n            const response = await axios.get('http://localhost:8888/gendered-users', {\n                params: {gender: user?.UserOrAgency}\n            })\n            setGenderedUsers(response.data)\n        } catch (error) {\n            console.log(error)\n        }\n    }\n\n    useEffect(() => {\n        getUser()\n\n    }, [])\n\n    // The code below uses the useEffect hook to call the getGenderedUsers function if the user is truthy.\n    useEffect(() => {\n        if (user) {\n            getGenderedUsers()\n        }\n    }, [user])\n\n    // The code below is a function that uses the axios PUT method to send a request to the server to update the matches for the user. \n    // The user's id and the id of the matched user are passed in as parameters. If the request is successful, the getUser function \n    // is called to get the updated list of matches for the user.\n\n    const updateMatches = async (matchedUserId) => {\n        try {\n            await axios.put('http://localhost:8888/addmatch', {\n                userId,\n                matchedUserId\n            })\n            getUser()\n        } catch (err) {\n            console.log(err)\n        }\n    }\n\n    // The code above defines two functions, swiped and outOfFrame, and a constant, filteredGenderedUsers. swiped takes in a \n    // direction and a swipedUserId, and if the direction is 'right', calls updateMatches with the swipedUserId. \n    // outOfFrame takes in a name and prints the name with ' left the screen!' concatenated to the console. \n    // filteredGenderedUsers is a constant that uses the .filter method on the genderedUsers array to return a new array with only \n    // the users that are not in the matchedUserIds array.\n    const swiped = (direction, swipedUserId) => {\n        if (direction === 'right') {\n            updateMatches(swipedUserId)\n        }\n        setLastDirection(direction)\n    }\n\n    const outOfFrame = (name) => {\n        console.log(name + ' left the screen!')\n    }\n\n    const matchedUserIds = user?.matches.map(({user_id}) => user_id).concat(userId)\n\n    const filteredGenderedUsers = genderedUsers?.filter(genderedUser => !matchedUserIds.includes(genderedUser.user_id))\n\n    // The code above is a functional component that renders a dashboard. The dashboard includes a chat container, \n    // a swipe container, and a card container. The chat container includes a chat window and a list of chat rooms. \n    // The swipe container contains Tinder cards that users can swipe left or right on. The card container displays the Tinder cards.\n    return (\n        <>\n            {user &&\n            <div className=\"dashboard\">\n                <ChatContainer user={user}/>\n                <div className=\"swipe-container\">\n                    <div className=\"card-container\">\n\n                        {filteredGenderedUsers?.map((genderedUser) =>\n                            <TinderCard\n                                className=\"swipe\"\n                                key={genderedUser.user_id}\n                                onSwipe={(dir) => swiped(dir, genderedUser.user_id)}\n                                onCardLeftScreen={() => outOfFrame(genderedUser.First_Name)}>\n                                <div\n                                    style={{backgroundImage: \"url(\" + genderedUser.url + \")\"}}\n                                    className=\"card\">\n                                    <h3>{genderedUser.First_Name}</h3>\n                                </div>\n                            </TinderCard>\n                        )}\n                        <div className=\"swipe-info\">\n                            {lastDirection ? <p>You swiped {lastDirection}</p> : <p/>}\n                        </div>\n                    </div>\n                </div>\n            </div>}\n        </>\n    )\n}\nexport default ControlPanel"],"mappings":"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"},"metadata":{},"sourceType":"module"}