{"ast":null,"code":"import _regeneratorRuntime from\"/Users/sethstephens/Desktop/fureverv4 2/furever/Client/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _asyncToGenerator from\"/Users/sethstephens/Desktop/fureverv4 2/furever/Client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _slicedToArray from\"/Users/sethstephens/Desktop/fureverv4 2/furever/Client/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import{useState}from'react';import axios from'axios';import{useNavigate}from'react-router-dom';import{useCookies}from'react-cookie';import'./AuthPopup.scss';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var AuthPopup=function AuthPopup(_ref){var setShowPopup=_ref.setShowPopup,isUser=_ref.isUser;// The code is setting up a stateful component in React. The email, password, and confirmPassword variables are all set to null, \n// and the error variable is set to null. The cookies variable is set to an object containing the cookies for the current domain, \n// and the setCookie and removeCookie functions are used to set and remove cookies, respectively.\nvar _useState=useState(null),_useState2=_slicedToArray(_useState,2),userEmail=_useState2[0],setUserEmail=_useState2[1];var _useState3=useState(null),_useState4=_slicedToArray(_useState3,2),userPassword=_useState4[0],setUserPassword=_useState4[1];var _useState5=useState(null),_useState6=_slicedToArray(_useState5,2),confirmUserPassword=_useState6[0],setConfirmUserPassword=_useState6[1];var _useState7=useState(null),_useState8=_slicedToArray(_useState7,2),error=_useState8[0],setError=_useState8[1];var _useCookies=useCookies(null),_useCookies2=_slicedToArray(_useCookies,3),cookies=_useCookies2[0],setCookie=_useCookies2[1],removeCookie=_useCookies2[2];// The navigate variable is set to a function that can be used to navigate to a different route.\nvar navigate=useNavigate();// The handleSubmit function is called when the user clicks the submit button. It checks if the user is signing up or logging in,\nvar handleClick=function handleClick(){setShowPopup(false);};// The handleSubmit function is called when the user clicks the submit button. It checks if the user is signing up or logging in,\n// and then sends a request to the server to either create a new user or log in the user.\n// prevent default is used to prevent the page from refreshing when the form is submitted.\nvar handleSubmit=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(e){var serverResponse,userSuccess;return _regeneratorRuntime().wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:e.preventDefault();// The code above is attempting to sign a user up or log a user in. If the user is signing up, it checks to see if the \n// password and confirm password fields match. If they do match, it sends a post request to the server with the email and password. \n// If the server responds with a status of 201, it means the user was userSuccessfully created, and the user is redirected to the onboarding page. \n// If the user is logging in and the server responds with a status of 201, it means the user was userSuccessfully logged in and the \n// user is redirected to the dashboard.        \n_context.prev=1;if(!(isUser&&userPassword!==confirmUserPassword)){_context.next=6;break;}alert(\"Passwords do not match\");setError('Passwords need to match!');return _context.abrupt(\"return\");case 6:_context.next=8;return axios.post(\"http://localhost:8888/\".concat(isUser?'enter':'reenter'),{userEmail:userEmail,userPassword:userPassword});case 8:serverResponse=_context.sent;setCookie('AuthToken',serverResponse.data.token);setCookie('UserId',serverResponse.data.userId);userSuccess=serverResponse.status===201;if(userSuccess&&isUser)navigate('/userform');if(userSuccess&&!isUser)navigate('/furever');window.location.reload();_context.next=20;break;case 17:_context.prev=17;_context.t0=_context[\"catch\"](1);console.log(_context.t0);case 20:case\"end\":return _context.stop();}}},_callee,null,[[1,17]]);}));return function handleSubmit(_x){return _ref2.apply(this,arguments);};}();// The code below defines a component for an authentication popup. The popup has a form with fields for email and password, \n// and a submit button. If the isUser prop is true, then the form also includes a field for confirming the password. \n// The component includes handlers for when the form is submitted and when the close icon is clicked. When the form is submitted, \n// the email and password state variables are set to the values of the corresponding fields in the form. If isUser is true, \n// then the confirmPassword state variable is set to the value of the password confirmation field. \n// The error state variable is used to display an error message, if one exists.\nreturn/*#__PURE__*/_jsxs(\"div\",{className:\"authPopup\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"close\",onClick:handleClick,children:\"X\"}),/*#__PURE__*/_jsx(\"h2\",{children:isUser?'Join Furever':'Welcome Back'}),/*#__PURE__*/_jsxs(\"form\",{onSubmit:handleSubmit,children:[/*#__PURE__*/_jsx(\"input\",{type:\"email\",id:\"email\",name:\"email\",placeholder:\"email\",required:true,onChange:function onChange(e){return setUserEmail(e.target.value);}}),/*#__PURE__*/_jsx(\"input\",{type:\"password\",id:\"password\",name:\"password\",placeholder:\"password\",required:true,onChange:function onChange(e){return setUserPassword(e.target.value);}}),isUser&&/*#__PURE__*/_jsx(\"input\",{type:\"password\",id:\"password-confirm\",name:\"password-confirm\",placeholder:\"confirm password\",required:true,onChange:function onChange(e){return setConfirmUserPassword(e.target.value);}}),/*#__PURE__*/_jsx(\"input\",{className:\"form-button\",type:\"submit\"}),/*#__PURE__*/_jsx(\"p\",{children:error})]})]});};export default AuthPopup;","map":{"version":3,"names":["useState","axios","useNavigate","useCookies","AuthPopup","setShowPopup","isUser","userEmail","setUserEmail","userPassword","setUserPassword","confirmUserPassword","setConfirmUserPassword","error","setError","cookies","setCookie","removeCookie","navigate","handleClick","handleSubmit","e","preventDefault","alert","post","serverResponse","data","token","userId","userSuccess","status","window","location","reload","console","log","target","value"],"sources":["/Users/sethstephens/Desktop/fureverv4 2/furever/Client/src/components/Authentication/FormAuth.js"],"sourcesContent":["import { useState } from 'react'\nimport axios from 'axios'\nimport { useNavigate } from 'react-router-dom'\nimport { useCookies } from 'react-cookie'\nimport './AuthPopup.scss'\n\n\nconst AuthPopup = ({ setShowPopup,  isUser }) => {\n\n    // The code is setting up a stateful component in React. The email, password, and confirmPassword variables are all set to null, \n    // and the error variable is set to null. The cookies variable is set to an object containing the cookies for the current domain, \n    // and the setCookie and removeCookie functions are used to set and remove cookies, respectively.\n    const [userEmail, setUserEmail] = useState(null)\n    const [userPassword, setUserPassword] = useState(null)\n    const [confirmUserPassword, setConfirmUserPassword] = useState(null)\n    const [error, setError] = useState(null)\n    const [ cookies, setCookie, removeCookie] = useCookies(null)\n\n\n    // The navigate variable is set to a function that can be used to navigate to a different route.\n    let navigate = useNavigate()\n\n    // The handleSubmit function is called when the user clicks the submit button. It checks if the user is signing up or logging in,\n    const handleClick = () => {\n        setShowPopup(false)\n    }\n\n    // The handleSubmit function is called when the user clicks the submit button. It checks if the user is signing up or logging in,\n    // and then sends a request to the server to either create a new user or log in the user.\n    // prevent default is used to prevent the page from refreshing when the form is submitted.\n    const handleSubmit = async (e) => {\n        e.preventDefault()\n\n\n        // The code above is attempting to sign a user up or log a user in. If the user is signing up, it checks to see if the \n        // password and confirm password fields match. If they do match, it sends a post request to the server with the email and password. \n        // If the server responds with a status of 201, it means the user was userSuccessfully created, and the user is redirected to the onboarding page. \n        // If the user is logging in and the server responds with a status of 201, it means the user was userSuccessfully logged in and the \n        // user is redirected to the dashboard.        \n\n        try {\n            if (isUser && (userPassword !== confirmUserPassword)) {\n                alert(\"Passwords do not match\")\n                setError('Passwords need to match!')\n                return\n            }\n\n            const serverResponse = await axios.post(`http://localhost:8888/${isUser ? 'enter' : 'reenter'}`, { userEmail, userPassword })\n\n            setCookie('AuthToken', serverResponse.data.token)\n            setCookie('UserId', serverResponse.data.userId)\n\n            const userSuccess = serverResponse.status === 201\n            if (userSuccess && isUser) navigate ('/userform')\n            if (userSuccess && !isUser) navigate ('/furever')\n\n            window.location.reload()\n\n        } catch (error) {\n            console.log(error)\n        }\n\n    }\n\n\n    // The code below defines a component for an authentication popup. The popup has a form with fields for email and password, \n    // and a submit button. If the isUser prop is true, then the form also includes a field for confirming the password. \n    // The component includes handlers for when the form is submitted and when the close icon is clicked. When the form is submitted, \n    // the email and password state variables are set to the values of the corresponding fields in the form. If isUser is true, \n    // then the confirmPassword state variable is set to the value of the password confirmation field. \n    // The error state variable is used to display an error message, if one exists.\n    return (\n        <div className=\"authPopup\">\n            <div className=\"close\" onClick={handleClick}>X</div>\n\n            <h2>{isUser ? 'Join Furever': 'Welcome Back'}</h2>\n            <form onSubmit={handleSubmit}>\n                <input\n                    type=\"email\"\n                    id=\"email\"\n                    name=\"email\"\n                    placeholder=\"email\"\n                    required={true}\n                    onChange={(e) => setUserEmail(e.target.value)}\n                />\n                <input\n                    type=\"password\"\n                    id=\"password\"\n                    name=\"password\"\n                    placeholder=\"password\"\n                    required={true}\n                    onChange={(e) => setUserPassword(e.target.value)}\n                />\n                {isUser && <input\n                    type=\"password\"\n                    id=\"password-confirm\"\n                    name=\"password-confirm\"\n                    placeholder=\"confirm password\"\n                    required={true}\n                    onChange={(e) => setConfirmUserPassword(e.target.value)}\n                />}\n                <input className=\"form-button\" type=\"submit\"/>\n                <p>{error}</p>\n            </form>\n        </div>\n    )\n}\nexport default AuthPopup"],"mappings":"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"},"metadata":{},"sourceType":"module"}